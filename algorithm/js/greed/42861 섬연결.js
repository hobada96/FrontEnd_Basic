function solution(n, costs) {    let answer = 0;    costs.sort((a, b) => a[2] - b[2]);    let parentArr = new Array(n).fill(0).map((_, idx) => idx);    costs.forEach((_, i) => {        const [from, to, dist] = costs[i];        if (!isSameNode(parentArr, from, to)) {            answer += dist;            unionParent(parentArr, from, to);        }    });    return answer;}function unionParent(parentArr, a, b) {    a = getParent(parentArr, a);    b = getParent(parentArr, b);    if (a < b) parentArr[b] = a;    else parentArr[a] = b;}function getParent(parentArr, x) {    if (parentArr[x] === x) return x;    return (parentArr[x] = getParent(parentArr, parentArr[x]));}function isSameNode(parentArr, a, b) {    a = getParent(parentArr, a);    b = getParent(parentArr, b);    if (a === b) return true;    else return false;}