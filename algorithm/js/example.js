<html><style>    td,    th {    height: 20px;    width: 100px;    padding: 10px;    text-align: center;    border: 1px solid;}</style><head>    <script>        window.onload = function () {        // the creation of objects        class Student {            constructor(name, age, enrolled, score) {                this.name = name;                this.age = age;                this.enrolled = enrolled;                this.score = score;            }        }        var studs = [        new Student('B', 28, false, 70),        new Student('E', 18, true, 80),        new Student('A', 29, true, 95),        new Student('D', 40, false, 67),        new Student('C', 30, true, 92),        ];        function makeTable() {        var table = document.querySelector('table');        var trNode = table.querySelector("tr");        if(tbody.childNodes.length > 0)  tbody.removeChild();        for(let i = 0 ; i < studs.length;i++){        var tbody = document.querySelector('tbody');        let cloneNode = trNode.cloneNode(true);        cloneNode.childNodes[1].innerText = studs[i].name;        cloneNode.childNodes[3].innerText = studs[i].age;        cloneNode.childNodes[5].innerText = studs[i].enrolled ? "등록" : "휴학";        cloneNode.childNodes[7].innerText = studs[i].score;        tbody.appendChild(cloneNode);    }    }        function sortByNmakeTable(key) {        switch (key) {        case 'name':        studs.sort((a,b) => a.name.localeCompare(b.name));        break;        case 'age':        studs.sort((a,b)=> a.age - b.age);        break;        case 'reg':        studs.sort((a,b)=> a.reg - b.reg);        break;        case 'score':        studs.sort((a,b) => a.score - b.score);        break;    }        makeTable();       // update table    }        //var divtag = document.GetElementById("div");        var button = document.querySelector(".button");        // button.addEventListener('click', makeTable);        button.onclick = function () {        makeTable();         // make the initial table        this.remove();       // remove the button    }        // set the click handler for each of table heads        var theads = document.querySelectorAll('thead tr td');        let [thName, thAge, thReg, thScore] = theads;        thName.onclick = () => sortByNmakeTable('name');        thAge.onclick = () => sortByNmakeTable('age');        thReg.onclick = () => sortByNmakeTable('reg');        thScore.onclick = () => sortByNmakeTable('score');    }    </script></head><body><h3>HTML의 &lt tr &gt를 clone 하여 append함으로써 table을 구성함 (sorting에 적용)</h3><li>tableCreateClone.html 파일 참조</li><li>초기 화면에 "테이블만들기" 버튼에 대한 click 핸들러에서 테이블을 만듦</li><li>makeTable() 의 핵심은 &lt thead &gt 의 &lt tr &gt 를 clone 하여 내용을 수정한 후 이를 table에 append 함</li><li>sort를 수행한 결과 화면을 재 구성하기 할 때는 table은 초기의 상태로 유지되어야 함 (즉, thead로만 구성된 상태)</li><li>이를 위해서 makeTable()의 맨 앞 부분에 thead만 남기고 나머지는 remove 시키는 과정이 적용됨</li><li>sortByNmakeTable() 함수는 studs를 key에 의해서 sorting 한 다음 이를 바탕으로 makeTable() 함수를 호출함으로써 table을 update 시킨다</li><hr>    <input type="button" value="테이블만들기" className="button" />    <table>        <thead>        <tr>            <td>이름</td>            <td>나이</td>            <td>등록</td>            <td>점수</td>        </tr>        </thead>        <tbody>        <!-- 이곳에 데이터가 추가됨 -->        </tbody>    </table></body></html>